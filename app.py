import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import numpy as np
from fpdf import FPDF
from PIL import Image
import io
import base64
import os
from datetime import datetime
from github import Github, InputGitTreeElement

# Initialize session state
if 'rca_records' not in st.session_state:
    st.session_state.rca_records = []
if 'capa_records' not in st.session_state:
    st.session_state.capa_records = []
if 'car_counter' not in st.session_state:
    st.session_state.car_counter = 1

# PDF Generator
class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'Brafe Engineering RCA/CAPA Report', 0, 1, 'C')
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf(rca_data, capa_data):
    pdf = PDF()
    pdf.add_page()
    
    # Add title
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, f'CAR Report: {capa_data["car_number"]}', 0, 1, 'L')
    pdf.ln(5)
    
    # Report details
    pdf.set_font('Arial', '', 12)
    pdf.cell(40, 10, 'Generated Date:', 0, 0)
    pdf.cell(0, 10, datetime.now().strftime("%Y-%m-%d %H:%M"), 0, 1)
    pdf.cell(40, 10, 'Generated By:', 0, 0)
    pdf.cell(0, 10, rca_data['generated_by'], 0, 1)
    pdf.cell(40, 10, 'Record Type:', 0, 0)
    pdf.cell(0, 10, rca_data['record_type'], 0, 1)
    
    if rca_data['record_type'] == 'Customer':
        pdf.cell(40, 10, 'Customer Name:', 0, 0)
        pdf.cell(0, 10, rca_data['customer_name'], 0, 1)
    
    pdf.ln(10)
    
    # RCA Details
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Root Cause Analysis', 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.multi_cell(0, 8, f"Problem Description: {rca_data['problem_description']}")
    pdf.ln(5)
    pdf.multi_cell(0, 8, f"Analysis: {rca_data['analysis']}")
    pdf.ln(5)
    
    # CAPA Details
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Corrective/Preventive Actions', 0, 1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(60, 10, 'Corrective Action:', 0, 0)
    pdf.multi_cell(0, 8, capa_data['corrective_action'])
    pdf.ln(5)
    pdf.cell(60, 10, 'Preventive Action:', 0, 0)
    pdf.multi_cell(0, 8, capa_data['preventive_action'])
    pdf.ln(5)
    pdf.cell(60, 10, 'Responsible Person:', 0, 0)
    pdf.cell(0, 10, capa_data['responsible'], 0, 1)
    pdf.cell(60, 10, 'Due Date:', 0, 0)
    pdf.cell(0, 10, capa_data['due_date'], 0, 1)
    pdf.cell(60, 10, 'Status:', 0, 0)
    pdf.cell(0, 10, capa_data['status'], 0, 1)
    pdf.ln(10)
    
    # Images
    if rca_data['images']:
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Evidence Photos', 0, 1)
        
        for idx, img_data in enumerate(rca_data['images']):
            try:
                # Decode base64 image
                img_bytes = base64.b64decode(img_data.split(",")[1])
                img = Image.open(io.BytesIO(img_bytes))
                
                # Save to temp file
                temp_file = f"temp_img_{idx}.png"
                img.save(temp_file, "PNG")
                
                # Add to PDF
                pdf.image(temp_file, x=10, w=180)
                pdf.ln(5)
                
                # Remove temp file
                os.remove(temp_file)
            except Exception as e:
                st.error(f"Error processing image: {e}")
    
    # Save PDF to bytes
    pdf_bytes = pdf.output(dest='S').encode('latin1')
    return pdf_bytes

# Save to GitHub
def save_to_github():
    try:
        # Replace with your GitHub token and repo details
        g = Github(st.secrets["GITHUB_TOKEN"])
        repo = g.get_repo(f"{st.secrets['GITHUB_USER']}/{st.secrets['GITHUB_REPO']}")
        
        # Create data files
        rca_df = pd.DataFrame(st.session_state.rca_records)
        capa_df = pd.DataFrame(st.session_state.capa_records)
        
        # Convert to CSV
        rca_csv = rca_df.to_csv(index=False)
        capa_csv = capa_df.to_csv(index=False)
        
        # Create file elements
        files = [
            InputGitTreeElement("rca_data.csv", "100644", "blob", rca_csv),
            InputGitTreeElement("capa_data.csv", "100644", "blob", capa_csv)
        ]
        
        # Create commit
        commit_message = f"Update RCA/CAPA data {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        master_ref = repo.get_git_ref("heads/main")
        master_sha = master_ref.object.sha
        base_tree = repo.get_git_tree(master_sha)
        tree = repo.create_git_tree(files, base_tree)
        parent = repo.get_git_commit(master_sha)
        commit = repo.create_git_commit(commit_message, tree, [parent])
        master_ref.edit(commit.sha)
        
        return True
    except Exception as e:
        st.error(f"Error saving to GitHub: {e}")
        return False

# Streamlit App
st.set_page_config(
    page_title="Brafe Engineering RCA/CAPA System",
    page_icon="üîß",
    layout="wide"
)

# Sidebar Navigation
with st.sidebar:
    st.image("https://via.placeholder.com/150x50.png?text=Brafe+Engineering", width=150)
    selected = option_menu(
        menu_title="Main Menu",
        options=["Dashboard", "Create RCA", "Create CAPA", "Generate Report", "Settings"],
        icons=["speedometer", "clipboard-plus", "shield-check", "file-earmark-pdf", "gear"],
        default_index=0
    )

# Dashboard Page
if selected == "Dashboard":
    st.title("üìä RCA/CAPA Dashboard")
    
    if not st.session_state.rca_records:
        st.info("No RCA records found. Create your first RCA.")
        st.stop()
    
    # Convert to DataFrames
    rca_df = pd.DataFrame(st.session_state.rca_records)
    capa_df = pd.DataFrame(st.session_state.capa_records)
    
    # Merge data
    merged_df = pd.merge(
        rca_df, 
        capa_df, 
        left_on='id', 
        right_on='rca_id',
        suffixes=('_rca', '_capa')
    )
    
    # KPI Metrics
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total RCA Records", len(rca_df))
    with col2:
        st.metric("Total CAPA Records", len(capa_df))
    with col3:
        open_capas = capa_df[capa_df['status'] != 'Closed']
        st.metric("Open CAPAs", len(open_capas))
    
    # Status Distribution
    st.subheader("CAPA Status Distribution")
    status_counts = capa_df['status'].value_counts()
    st.bar_chart(status_counts)
    
    # Data Tables
    st.subheader("Recent RCA Records")
    st.dataframe(rca_df.tail(5), height=200)
    
    st.subheader("Recent CAPA Records")
    st.dataframe(capa_df.tail(5), height=200)
    
    # Export to GitHub
    if st.button("üíæ Save Data to GitHub"):
        if save_to_github():
            st.success("Data saved to GitHub successfully!")
        else:
            st.error("Failed to save data to GitHub")

# Create RCA Page
elif selected == "Create RCA":
    st.title("üìù Create Root Cause Analysis")
    
    with st.form("rca_form"):
        # Record Type
        record_type = st.radio("Record Type", ["Internal", "Customer"], horizontal=True)
        
        # Customer Details
        customer_name = ""
        if record_type == "Customer":
            customer_name = st.text_input("Customer Name")
        
        # Problem Details
        problem_description = st.text_area("Problem Description", height=150)
        analysis = st.text_area("Root Cause Analysis", height=200)
        
        # Reference Information
        col1, col2, col3 = st.columns(3)
        with col1:
            po_number = st.text_input("Purchase Order (PO)")
        with col2:
            work_order = st.text_input("Work Order")
        with col3:
            generated_by = st.text_input("Generated By", value=st.session_state.get('user', ''))
        
        # Image Upload
        images = st.file_uploader("Upload Evidence Photos", 
                                 type=["jpg", "jpeg", "png"], 
                                 accept_multiple_files=True)
        
        # Form Submission
        submitted = st.form_submit_button("Save RCA")
        
        if submitted:
            if not problem_description:
                st.error("Problem description is required!")
            else:
                # Process images
                image_data = []
                for img in images:
                    if img is not None:
                        # Convert to base64
                        img_bytes = img.getvalue()
                        img_base64 = base64.b64encode(img_bytes).decode()
                        image_data.append(f"data:{img.type};base64,{img_base64}")
                
                # Create RCA record
                rca_record = {
                    "id": f"RCA-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                    "record_type": record_type,
                    "customer_name": customer_name,
                    "problem_description": problem_description,
                    "analysis": analysis,
                    "po_number": po_number,
                    "work_order": work_order,
                    "generated_by": generated_by,
                    "created_at": datetime.now().isoformat(),
                    "images": image_data
                }
                
                st.session_state.rca_records.append(rca_record)
                st.success("RCA record created successfully!")

# Create CAPA Page
elif selected == "Create CAPA":
    st.title("üõ°Ô∏è Create Corrective/Preventive Action")
    
    if not st.session_state.rca_records:
        st.warning("No RCA records found. Please create an RCA first.")
        st.stop()
    
    # RCA Selection
    rca_options = {rca['id']: f"{rca['id']} - {rca['problem_description'][:50]}..." 
                   for rca in st.session_state.rca_records}
    selected_rca = st.selectbox("Select RCA", options=list(rca_options.keys()), 
                               format_func=lambda x: rca_options[x])
    
    # Get selected RCA data
    rca_data = next((r for r in st.session_state.rca_records if r['id'] == selected_rca), None)
    
    if rca_data:
        st.subheader("RCA Details")
        st.write(f"**Problem:** {rca_data['problem_description']}")
        st.write(f"**Analysis:** {rca_data['analysis']}")
        
        with st.form("capa_form"):
            # CAR Number
            car_number = st.text_input("CAR Number", 
                                     value=f"CAR-{datetime.now().year}-{st.session_state.car_counter:03d}")
            
            # CAPA Details
            corrective_action = st.text_area("Corrective Action", height=150)
            preventive_action = st.text_area("Preventive Action", height=150)
            
            # Action Details
            col1, col2 = st.columns(2)
            with col1:
                responsible = st.text_input("Responsible Person/Team")
            with col2:
                due_date = st.date_input("Due Date")
            
            # Status
            status = st.selectbox("Status", ["Open", "In Progress", "Completed", "Closed"])
            
            # Form Submission
            submitted = st.form_submit_button("Save CAPA")
            
            if submitted:
                if not corrective_action or not preventive_action:
                    st.error("Both corrective and preventive actions are required!")
                else:
                    # Create CAPA record
                    capa_record = {
                        "id": f"CAPA-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                        "rca_id": selected_rca,
                        "car_number": car_number,
                        "corrective_action": corrective_action,
                        "preventive_action": preventive_action,
                        "responsible": responsible,
                        "due_date": due_date.isoformat(),
                        "status": status,
                        "created_at": datetime.now().isoformat()
                    }
                    
                    st.session_state.capa_records.append(capa_record)
                    st.session_state.car_counter += 1
                    st.success("CAPA record created successfully!")

# Generate Report Page
elif selected == "Generate Report":
    st.title("üìÑ Generate RCA/CAPA Report")
    
    if not st.session_state.capa_records:
        st.warning("No CAPA records found. Please create a CAPA first.")
        st.stop()
    
    # CAPA Selection
    capa_options = {capa['car_number']: f"{capa['car_number']} - {capa['corrective_action'][:30]}..." 
                    for capa in st.session_state.capa_records}
    selected_capa = st.selectbox("Select CAPA", options=list(capa_options.keys()), 
                                format_func=lambda x: capa_options[x])
    
    # Get selected CAPA data
    capa_data = next((c for c in st.session_state.capa_records if c['car_number'] == selected_capa), None)
    
    if capa_data:
        # Get linked RCA
        rca_data = next((r for r in st.session_state.rca_records if r['id'] == capa_data['rca_id']), None)
        
        if rca_data:
            st.subheader("Report Preview")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**CAR Number:**", capa_data['car_number'])
                st.write("**Problem Description:**", rca_data['problem_description'])
                st.write("**Corrective Action:**", capa_data['corrective_action'])
                st.write("**Preventive Action:**", capa_data['preventive_action'])
            
            with col2:
                st.write("**Responsible:**", capa_data['responsible'])
                st.write("**Due Date:**", capa_data['due_date'])
                st.write("**Status:**", capa_data['status'])
                st.write("**Generated By:**", rca_data['generated_by'])
            
            # Show images
            if rca_data['images']:
                st.subheader("Evidence Photos")
                cols = st.columns(3)
                for idx, img_data in enumerate(rca_data['images']):
                    try:
                        # Decode base64 image
                        img_bytes = base64.b64decode(img_data.split(",")[1])
                        img = Image.open(io.BytesIO(img_bytes))
                        
                        with cols[idx % 3]:
                            st.image(img, caption=f"Image {idx+1}", use_column_width=True)
                    except:
                        pass
            
            # Generate PDF button
            if st.button("Generate PDF Report"):
                pdf_bytes = generate_pdf(rca_data, capa_data)
                
                # Download link
                st.download_button(
                    label="Download PDF Report",
                    data=pdf_bytes,
                    file_name=f"{capa_data['car_number']}_report.pdf",
                    mime="application/pdf"
                )
        else:
            st.error("Linked RCA record not found!")

# Settings Page
elif selected == "Settings":
    st.title("‚öôÔ∏è System Settings")
    
    st.subheader("GitHub Configuration")
    with st.form("github_config"):
        github_user = st.text_input("GitHub Username")
        github_repo = st.text_input("Repository Name")
        github_token = st.text_input("GitHub Access Token", type="password")
        
        st.info("""
        **How to get a GitHub access token:**
        1. Go to GitHub Settings > Developer Settings > Personal Access Tokens
        2. Generate a new token with "repo" scope
        """)
        
        if st.form_submit_button("Save GitHub Configuration"):
            st.session_state.github_config = {
                "GITHUB_USER": github_user,
                "GITHUB_REPO": github_repo,
                "GITHUB_TOKEN": github_token
            }
            st.success("GitHub configuration saved to session!")
    
    st.subheader("User Preferences")
    username = st.text_input("Default Username", value=st.session_state.get('user', ''))
    if st.button("Save User Preference"):
        st.session_state.user = username
        st.success("User preference saved!")
    
    st.subheader("System Information")
    st.write(f"**RCA Records:** {len(st.session_state.rca_records)}")
    st.write(f"**CAPA Records:** {len(st.session_state.capa_records)}")
    st.write(f"**Next CAR Number:** CAR-{datetime.now().year}-{st.session_state.car_counter:03d}")
    
    # Reset data button
    if st.button("‚ö†Ô∏è Reset All Data", type="primary"):
        st.session_state.rca_records = []
        st.session_state.capa_records = []
        st.session_state.car_counter = 1
        st.success("All data has been reset!")
